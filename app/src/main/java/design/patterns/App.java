/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package design.patterns;

import design.patterns.abstract_factory_design.Ecosystem;
import design.patterns.abstract_factory_design.ecosystem_factory.EcosystemAppleFactory;
import design.patterns.abstract_factory_design.ecosystem_factory.EcosystemGoogleFactory;
import design.patterns.builder_design.AbstractSmartphone;
import design.patterns.builder_design.SmartphoneBuilder;
import design.patterns.factory_design.AvailableOS;
import design.patterns.factory_design.IOperatingSystem;
import design.patterns.factory_design.OperatingSystemFactory;

public class App {

    public static void main(String[] args) {

        /* 1. Builder Design Pattern
         * This pattern is useful when the class has so many properties. 
         * With builder design pattern, developer does not have to worry
         * about the order of parameters passed in the constructor instead
         * Setters are used for that.
         */
        builderDesignPattern();

        /* 2. Factory Design
         * The task of creating an object is taken from client and assigned
         * to Factory class. Factory class will produce object based on the
         * client requirement.
         */
        factoryDesignPattern(); 

        /* 3. Abstract Factory Design
         * This is similar to factory design but there is a small difference.
         * Used when we need to create a set of objects which come under a
         * paticular group/family.
         */
        abstractFactoryDesignPattern();
    }

    public static void builderDesignPattern(){
        // \033[1m  \033[0m is for bold text. Not important
        System.out.println("\n\033[1mBuilder Design Pattern\033[0m");
        System.out.println("Customer: I need a Samsung phone");
        AbstractSmartphone smartphone1 = new SmartphoneBuilder()
            .setCamera(50)
            .setCpu("Snapdragon 695")
            .setDisplaySize(6.1f)
            .setRam(8)
            .setStorage(128)
            .setName("S22")
            .getSmartphone("Samsung");
            System.out.println("Make Call Operation: " + smartphone1.makeCall("98123213"));

        System.out.println("Customer: I need an iPhone");
        AbstractSmartphone smartphone2 = new SmartphoneBuilder()
            .setCamera(48)
            .setCpu("A16 Bionic")
            .setDisplaySize(6.1f)
            .setRam(6)
            .setStorage(128)
            .setName("14 pro")
            .getSmartphone("iPhone");
            System.out.println("Send SMS Operation: " + smartphone2.sendSMS("98123213", "Hi"));
    }

    public static void abstractFactoryDesignPattern(){
        System.out.println("\n\033[1mAbstract Factory Design Pattern\033[0m");
        System.out.println("Customer: I love Google Ecosystem");
        Ecosystem ecosystem1 = new Ecosystem(new EcosystemGoogleFactory());
        System.out.println(ecosystem1.toString());

        System.out.println("Customer: I love Apple Ecosystem");
        Ecosystem ecosystem2 = new Ecosystem(new EcosystemAppleFactory());
        System.out.println(ecosystem2.toString());
    }

    public static void factoryDesignPattern(){
        System.out.println("Customer: I want a highly customizable OS");
        IOperatingSystem operatingSystem1 = new OperatingSystemFactory().developOS(AvailableOS.ANDROID);
        operatingSystem1.bootUp();
        System.out.println("Customer: I want a premium OS experience");
        IOperatingSystem operatingSystem2 = new OperatingSystemFactory().developOS(AvailableOS.IOS);
        operatingSystem2.bootUp();
        System.out.println("Customer: I want to try some other OS");
        IOperatingSystem operatingSystem3 = new OperatingSystemFactory().developOS(AvailableOS.BLACKBERRY);
        operatingSystem3.bootUp();
    }

}
